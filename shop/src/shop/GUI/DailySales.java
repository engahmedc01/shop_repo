/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shop.GUI;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Font;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Vector;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.text.PlainDocument;
import shop.GUI_attachement_pkg.PersonAddress_STF;
import shop.GUI_attachement_pkg.PersonName_STF;
import shop.Validation_pkg.DoubleInputValidator;
import shop.Validation_pkg.LongInputValidator;
import shop.data_source_pkg.DataSourc;
import shop.data_structures_pkg.Pair;
import shop.test.AttributiveCellTableModel;
import shop.test.CellSpan;
import shop.test.MultiSpanCellTable;

/**
 *
 * @author ahmed
 */
public class DailySales extends javax.swing.JPanel {

    /**
     * Creates new form DailySales
     */
    Main_Frame myFrame;
    DataSourc data_source;
    OrderForm_panel orderForm;
    MultiSpanCellTable fixedTable;
    List<java.util.Date> dailySalesBookDates;
    boolean monthesFillingMode;
    boolean dayFillinMode;

    public DailySales(Main_Frame myFrame, DataSourc data_source) {
        this.myFrame = myFrame;
        this.data_source = data_source;

        intiatiateDailysalesBook();
        initComponents();
        orderForm = new OrderForm_panel(myFrame, data_source, orderForm_dialog);
        orderForm_dialog.add(orderForm);

        fillDailySalesbookDates();
        total_TF.getDocument().addDocumentListener(new paidValueTracker());
        paid_TF.getDocument().addDocumentListener(new RestValueTracker());

    }

    void intiatiateDailysalesBook() {
        Object[][] data = new Object[][]{};

        AttributiveCellTableModel fixedModel = new AttributiveCellTableModel(
                data, dailSalesBook_columntitles) {
                    public boolean CellEditable(int row, int col) {
                        return false;
                    }
                };

        fixedTable = new MultiSpanCellTable(fixedModel);
        fixedTable.setRowHeight(25);
        fixedTable.setFont(new Font("Arail", Font.BOLD, 14));
    }

    boolean validateInputData() {
        boolean valid = false;

        int index = sellerType_CB.getSelectedIndex();
        if (total_TF.getText().isEmpty() || total_TF.getText().equals("0.0")) {

            wraning_label.setText("يجب إدراج الطلب");
            return false;

        }

        if (permenant_TF.getText().isEmpty() && index == 1) {

            wraning_label.setText("يجب إدخال اسم البياع");
            return false;
        }
        double rest = Double.parseDouble(rest_TF.getText());
        if (rest < 0) {
            wraning_label.setText(("المبلغ المدفوع اكبر من المستحق : " + total_TF.getText()));
            return false;

        } else {
            wraning_label.setText("");
            return true;
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        orderForm_dialog = new javax.swing.JDialog();
        orderDate_panel = new javax.swing.JPanel();
        dates_CB = new javax.swing.JComboBox();
        temperoary_TF = new PersonName_STF(myFrame,"seller_temperory", data_source,address_TF,phone_TF);
        jScrollPane2 = new javax.swing.JScrollPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        dataInput_panel = new javax.swing.JPanel();
        save_btn = new javax.swing.JButton();
        wraning_label = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        sellerType_CB = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        cash_TF = new javax.swing.JTextField();
        permenant_TF = new PersonName_STF(myFrame, "seller_permenant", data_source) ;
        phone_TF = new javax.swing.JTextField();
        address_TF = new PersonAddress_STF(data_source, myFrame, "customer");
        total_TF = new javax.swing.JTextField();
        paid_TF = new javax.swing.JTextField();
        rest_TF = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        paid_label = new javax.swing.JLabel();
        rest_label = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        addOrder_btn = new javax.swing.JButton();
        delete_btn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderDetaile_table = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        month_CB = new javax.swing.JComboBox();
        day_CB = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        day_label = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane(fixedTable);

        orderForm_dialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        orderForm_dialog.setLocation(new java.awt.Point(500, 200));
        orderForm_dialog.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        orderForm_dialog.setSize(new java.awt.Dimension(400, 400));
        orderForm_dialog.setType(java.awt.Window.Type.UTILITY);
        orderForm_dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                orderForm_dialogWindowDeactivated(evt);
            }
        });
        orderForm_dialog.getContentPane().setLayout(new javax.swing.OverlayLayout(orderForm_dialog.getContentPane()));

        orderDate_panel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 3, true), "بيانات الطلب"));

        javax.swing.GroupLayout orderDate_panelLayout = new javax.swing.GroupLayout(orderDate_panel);
        orderDate_panel.setLayout(orderDate_panelLayout);
        orderDate_panelLayout.setHorizontalGroup(
            orderDate_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 775, Short.MAX_VALUE)
        );
        orderDate_panelLayout.setVerticalGroup(
            orderDate_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 174, Short.MAX_VALUE)
        );

        dates_CB.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        dates_CB.setForeground(new java.awt.Color(255, 0, 51));
        dates_CB.setPreferredSize(new java.awt.Dimension(150, 30));
        dates_CB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dates_CBItemStateChanged(evt);
            }
        });
        dates_CB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dates_CBActionPerformed(evt);
            }
        });

        temperoary_TF.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        temperoary_TF.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        temperoary_TF.setPreferredSize(new java.awt.Dimension(6, 35));
        temperoary_TF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                temperoary_TFActionPerformed(evt);
            }
        });

        setLayout(new javax.swing.OverlayLayout(this));

        jSplitPane1.setDividerLocation(370);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jSplitPane2.setDividerLocation(800);

        dataInput_panel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 3, true), "بيانات البياع"));

        save_btn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        save_btn.setText("حفظ");
        save_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_btnActionPerformed(evt);
            }
        });

        wraning_label.setBackground(new java.awt.Color(204, 204, 255));
        wraning_label.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        wraning_label.setForeground(new java.awt.Color(255, 0, 51));
        wraning_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        sellerType_CB.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        sellerType_CB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "نقدي", "دائم" }));
        sellerType_CB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sellerType_CBItemStateChanged(evt);
            }
        });
        sellerType_CB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellerType_CBActionPerformed(evt);
            }
        });

        jPanel5.setLayout(new java.awt.CardLayout());

        cash_TF.setEditable(false);
        jPanel5.add(cash_TF, "cash_card");

        permenant_TF.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        permenant_TF.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel5.add(permenant_TF, "permenant_card");

        phone_TF.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        phone_TF.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        phone_TF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phone_TFActionPerformed(evt);
            }
        });

        address_TF.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        address_TF.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        total_TF.setEditable(false);
        total_TF.setFont(new java.awt.Font("Arial", 0, 20)); // NOI18N
        total_TF.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        total_TF.setText("0.0");

        paid_TF.setFont(new java.awt.Font("Arial", 0, 20)); // NOI18N
        paid_TF.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        rest_TF.setEditable(false);
        rest_TF.setFont(new java.awt.Font("Arial", 0, 20)); // NOI18N
        rest_TF.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rest_TF)
            .addComponent(paid_TF)
            .addComponent(total_TF, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(address_TF)
            .addComponent(phone_TF)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(sellerType_CB, 0, 0, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(sellerType_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(phone_TF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(address_TF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(total_TF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paid_TF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rest_TF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48))
        );

        PlainDocument customerPhone_TF_doc = (PlainDocument)phone_TF .getDocument();
        customerPhone_TF_doc .setDocumentFilter(new LongInputValidator(this.phone_TF, this.wraning_label));
        PlainDocument total_TF_doc = (PlainDocument)total_TF.getDocument();
        total_TF_doc.setDocumentFilter(new DoubleInputValidator(this.total_TF , this.wraning_label));
        PlainDocument paid_TF_doc = (PlainDocument)paid_TF.getDocument();
        paid_TF_doc.setDocumentFilter(new DoubleInputValidator(this.paid_TF , this.wraning_label));
        PlainDocument rest_TF_doc = (PlainDocument)paid_TF.getDocument();
        rest_TF_doc.setDocumentFilter(new DoubleInputValidator(this.rest_TF , this.wraning_label));

        jLabel8.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("نوع  البياع:");

        jLabel7.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("اسم البياع:");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("التليفون:");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("العنوان:");

        jLabel11.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("الأجمالي:");

        paid_label.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        paid_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        paid_label.setText("المدفوع:");

        rest_label.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        rest_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        rest_label.setText("المتبقي:");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(paid_label, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(rest_label, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paid_label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rest_label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel7.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout dataInput_panelLayout = new javax.swing.GroupLayout(dataInput_panel);
        dataInput_panel.setLayout(dataInput_panelLayout);
        dataInput_panelLayout.setHorizontalGroup(
            dataInput_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataInput_panelLayout.createSequentialGroup()
                .addGroup(dataInput_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dataInput_panelLayout.createSequentialGroup()
                        .addComponent(save_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wraning_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(dataInput_panelLayout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        dataInput_panelLayout.setVerticalGroup(
            dataInput_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataInput_panelLayout.createSequentialGroup()
                .addGroup(dataInput_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(dataInput_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wraning_label, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(save_btn))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        jSplitPane2.setRightComponent(dataInput_panel);

        jPanel4.setPreferredSize(new java.awt.Dimension(600, 367));

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 255), 3, true));

        addOrder_btn.setText("إضافه");
        addOrder_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOrder_btnActionPerformed(evt);
            }
        });
        jPanel2.add(addOrder_btn);

        delete_btn.setText("مسح");
        delete_btn.setEnabled(false);
        delete_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_btnActionPerformed(evt);
            }
        });
        jPanel2.add(delete_btn);

        orderDetaile_table.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        orderDetaile_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "اسم العميل", "المبلغ", "الفئة", "عدد", "الصافي", "القائم", "المنتج"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderDetaile_table.setRowHeight(25);
        orderDetaile_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderDetaile_tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(orderDetaile_table);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 687, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                .addGap(12, 12, 12))
        );

        jSplitPane2.setLeftComponent(jPanel4);

        jSplitPane1.setLeftComponent(jSplitPane2);

        jPanel1.setPreferredSize(new java.awt.Dimension(700, 481));

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 255), 3));
        jPanel3.setForeground(new java.awt.Color(102, 102, 255));

        month_CB.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        month_CB.setPreferredSize(new java.awt.Dimension(150, 30));
        month_CB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                month_CBActionPerformed(evt);
            }
        });
        jPanel3.add(month_CB);

        day_CB.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        day_CB.setPreferredSize(new java.awt.Dimension(75, 30));
        day_CB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                day_CBActionPerformed(evt);
            }
        });
        jPanel3.add(day_CB);

        jLabel9.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("الموافق:");
        jLabel9.setPreferredSize(new java.awt.Dimension(60, 22));
        jPanel3.add(jLabel9);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("(");
        jLabel1.setPreferredSize(new java.awt.Dimension(15, 22));
        jPanel3.add(jLabel1);

        day_label.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        day_label.setForeground(new java.awt.Color(255, 0, 51));
        day_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        day_label.setText("الجمعه");
        day_label.setPreferredSize(new java.awt.Dimension(60, 22));
        jPanel3.add(day_label);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setText(")");
        jPanel3.add(jLabel10);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText(" مبيع يوم:");
        jLabel2.setPreferredSize(new java.awt.Dimension(80, 22));
        jPanel3.add(jLabel2);
        jPanel3.add(jLabel13);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 895, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(jPanel1);

        jScrollPane2.setViewportView(jSplitPane1);

        add(jScrollPane2);
    }// </editor-fold>//GEN-END:initComponents
public void intiateAddOrderPage() {
        this.address_TF.setText("");
        this.paid_TF.setText("");
        this.phone_TF.setText("");
        this.temperoary_TF.setText("");
        this.total_TF.setText("");
        this.rest_TF.setText("");
        this.temperoary_TF.setText("");
        this.permenant_TF.setText("");

        DefaultTableModel dtm = (DefaultTableModel) orderDetaile_table.getModel();
        dtm.setDataVector(new Object[][]{}, orderDetails_columnsNames);
        orderDetaile_table.setModel(dtm);
    }

    String NormalizeinArabic(String str) {

        char[] arabicChars = {'٠', '١', '٢', '٣', '٤', '٥', '٦', '٧', '٨', '٩'};
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < str.length(); i++) {
            if (Character.isDigit(str.charAt(i))) {
                builder.append(arabicChars[(int) (str.charAt(i)) - 48]);
            } else {
                builder.append(str.charAt(i));
            }
        }
//        System.out.println("Number in English : " + str);
//        System.out.println("Number In Arabic : " + builder.toString());
        return builder.toString();
    }

    List<String> getDaysList(List<java.util.Date> dates, String selectedMonth) {
        DateFormat df = new SimpleDateFormat("MMMMMM-yyyy ", new Locale("ar", "AE", "Arabic"));// DateFormat.getDateTimeInstance(DateFormat.DEFAULT,DateFormat.FULL, new Locale("ar","AE","Arabic"));
        DateFormat df_day = new SimpleDateFormat("dd", new Locale("ar", "AE", "Arabic"));// DateFormat.getDateTimeInstance(DateFormat.DEFAULT,DateFormat.FULL, new Locale("ar","AE","Arabic"));

        List<String> days = new ArrayList<>();
        boolean isCurrentMonthe = false;
        for (int i = 0; i < dates.size(); i++) {
            String month = (df.format(dates.get(i)));
            if (month.equals(selectedMonth)) {
                days.add((df_day.format(dates.get(i))));

            }

        }
        String currentMonthe = (df.format(new Date()));
        String currentDay = (df_day.format(new Date()));

        if (!days.contains(currentDay) && selectedMonth.equals(currentMonthe)) {
            days.add(currentDay);

        }
        return days;

    }

    List<String> getMonthesList(List<java.util.Date> dates) {
        DateFormat df = new SimpleDateFormat("MMMMMM-yyyy ", new Locale("ar", "AE", "Arabic"));// DateFormat.getDateTimeInstance(DateFormat.DEFAULT,DateFormat.FULL, new Locale("ar","AE","Arabic"));
        List<String> monthes = new ArrayList<>();
        for (int i = 0; i < dates.size(); i++) {
            String date = (df.format(dates.get(i)));
            if (!monthes.contains(date)) {
                monthes.add((date));

            }

        }
        String currentMonth = (df.format(new Date()));
        if (!monthes.contains(currentMonth)) {
            monthes.add(currentMonth);

        }
        return monthes;

    }

    void fillDailySalesbookDates() {

        monthesFillingMode = true;
        int seasonID = data_source.getCurrentSeason();
        dailySalesBookDates = data_source.getDailySalesBookDates(myFrame.firdage_id, seasonID);
        DateFormat df = new SimpleDateFormat("MMMMMM-yyyy ", new Locale("ar", "AE", "Arabic"));// DateFormat.getDateTimeInstance(DateFormat.DEFAULT,DateFormat.FULL, new Locale("ar","AE","Arabic"));

        List<String> monthes = getMonthesList(dailySalesBookDates);
        month_CB.removeAllItems();

        for (int i = 0; i < monthes.size(); i++) {
            String formattedDate = (monthes.get(i));
            month_CB.addItem(formattedDate);
        }
        monthesFillingMode = false;
        String currentMonth = (df.format(new Date()));
        month_CB.setSelectedItem(currentMonth);

    }


    private void save_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_btnActionPerformed
        // TODO add your handling code here:
        if (validateInputData()) {
            String name = (sellerType_CB.getSelectedIndex() == 1) ? permenant_TF.getText() : " ";
            String address = address_TF.getText();
            String phone = phone_TF.getText();
            String type = this.sellerType_CB.getSelectedItem().toString();
            type = getSellerTypeInenglish(type);
            DefaultTableModel dtm = (DefaultTableModel) orderDetaile_table.getModel();
            Vector<Object> orderDetailData = dtm.getDataVector();
            double totalCost = Double.parseDouble(total_TF.getText());
            String spaid = paid_TF.getText();
            spaid = (spaid.isEmpty()) ? "0.0" : spaid;
            double paid = Double.parseDouble(spaid);
            data_source.sellerTransaction(name, address, phone, type, orderDetailData, totalCost, paid, myFrame.firdage_id);
            fillDailySalesBook_Table(new java.sql.Date(new java.util.Date().getTime()));
            orderForm.orderWithDrawalQuantity = new HashMap<>();
            intiateAddOrderPage();

        }

    }//GEN-LAST:event_save_btnActionPerformed

    public class paidValueTracker implements DocumentListener {

        public paidValueTracker() {

        }

        void track() {
            if (!total_TF.getText().isEmpty()) {
                double total = Double.parseDouble(total_TF.getText());

                if (total != 0) {
                    int index = sellerType_CB.getSelectedIndex();
                    if (index == 0) {
                        paid_TF.setText(total_TF.getText());

                    }

                }
            } else {
                paid_TF.setText("");

            }

        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            track();

        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            track();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            track();
        }

    }

    public class RestValueTracker implements DocumentListener {

        public RestValueTracker() {

        }

        void track() {
            setRestVlaue();
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            track();

        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            track();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            track();
        }

    }

    String getSellerTypeInenglish(String name) {
        switch (name) {

            case "نقدي":
                return "CASH";
            case "مؤقت":
                return "TEMPERORY";
            case "دائم":
                return "PERMENANT";

        }
        return null;

    }

    void fillDailySalesBook_Table(java.sql.Date date) {
        List<Pair<int[], int[]>> spanRowsList = new ArrayList<>();
        List<Integer> GapRows = new ArrayList<>();
        Object[][] data = data_source.getDailyBookTransaction(date, spanRowsList, GapRows, myFrame.firdage_id);

        AttributiveCellTableModel fixedModel = new AttributiveCellTableModel(
                data, dailSalesBook_columntitles) {
                    @Override
                    public boolean isCellEditable(int row, int col) {
                        return false;
                    }
                };
        CellSpan cellAtt = (CellSpan) fixedModel.getCellAttribute();
//        for (int i = 0; i < spanRowsList.size(); i++) {
//            cellAtt.combine(spanRowsList.get(i).getFrist(), spanRowsList.get(i).getSecond());
//
//        }

        for (int i = 0; i < GapRows.size(); i++) {
            cellAtt.combine(new int[]{GapRows.get(i) - 1}, new int[]{1, 2, 3, 4, 5, 6, 7});

        }

        fixedTable.setModel(fixedModel);

        fixedTable.setDefaultRenderer(Object.class, new MyCellRenderer(GapRows));
        setFixedTableSize();
    }

    void setFixedTableSize() {
        fixedTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableColumn column = null;
        for (int i = 0; i < fixedTable.getColumnModel().getColumnCount(); i++) {
            column = fixedTable.getColumnModel().getColumn(i);

            switch (i) {
                case 0:
                    column.setPreferredWidth(250);
                    break;
                case 1:
                    column.setPreferredWidth(110);
                    break;

                case 2:
                    column.setPreferredWidth(110);
                    break;

                case 3:
                    column.setPreferredWidth(110);
                    break;

                case 4:
                    column.setPreferredWidth(110);
                    break;

                case 5:
                    column.setPreferredWidth(110);
                    break;

                case 6:
                    column.setPreferredWidth(110);
                    break;

                case 7:
                    column.setPreferredWidth(110);
                    break;

                case 8:
                    column.setPreferredWidth(200);
                    break;
            }
        }

    }

    void setOrderDetaile_tableSize() {
        //  orderDetaile_table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableColumn column = null;
        for (int i = 0; i < orderDetaile_table.getColumnModel().getColumnCount(); i++) {
            column = orderDetaile_table.getColumnModel().getColumn(i);

            switch (i) {
                case 0:
                    column.setPreferredWidth(300);
                    break;

            }
        }

    }


    private void dates_CBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dates_CBItemStateChanged
        // TODO add your handling code here:
        JComboBox cb = (JComboBox) evt.getSource();
        Object item = evt.getItem();

        if (evt.getStateChange() == evt.SELECTED) {

        } else if (evt.getStateChange() == evt.DESELECTED) {
            // Item is no longer selected
        }

    }//GEN-LAST:event_dates_CBItemStateChanged

    private void addOrder_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrder_btnActionPerformed
        // TODO add your handling code here:

        this.orderForm.fridageNumber = myFrame.firdage_id;
        this.orderForm.intiateForm();
        orderForm_dialog.setVisible(true);


    }//GEN-LAST:event_addOrder_btnActionPerformed

    private void orderForm_dialogWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_orderForm_dialogWindowDeactivated
        // TODO add your handling code here:
        if (orderForm.ok_btn_flage) {
            DefaultTableModel dtm = (DefaultTableModel) orderDetaile_table.getModel();
            Map orderData = orderForm.orderDataMap;
            
            
            dtm.addRow(new Object[]{
              orderData.get("orderTag").toString(),
                orderData.get("totalCost"),
                orderData.get("UnitePrice"),
                orderData.get("packageNumber"),
                orderData.get("netWeight"),
                orderData.get("weight"),
                orderData.get("product")});

            double cost = Double.parseDouble(orderData.get("totalCost").toString());
            double totalCost = (total_TF.getText().isEmpty()) ? 0 : Double.parseDouble(total_TF.getText());
            cost += totalCost;
            total_TF.setText(String.valueOf(cost));
            double paid = (paid_TF.getText().isEmpty()) ? 0 : Double.parseDouble(paid_TF.getText());
            rest_TF.setText(String.valueOf(cost - paid));
            setOrderDetaile_tableSize();
        }
    }//GEN-LAST:event_orderForm_dialogWindowDeactivated

    private void delete_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_btnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel) orderDetaile_table.getModel();

        Vector<Object> row = (Vector<Object>) dtm.getDataVector().get(orderDetaile_table.getSelectedRow());

        double order_cost = Double.parseDouble(row.get(1).toString());

        double oldCost = Double.parseDouble(this.total_TF.getText());
        double newCost = oldCost - order_cost;
        this.total_TF.setText(String.valueOf(newCost));
        double paid = (paid_TF.getText().isEmpty()) ? 0 : Double.parseDouble(paid_TF.getText());
        rest_TF.setText(String.valueOf(newCost + paid));

        dtm.removeRow(orderDetaile_table.getSelectedRow());
        String productName = row.get(6).toString();

        int productID = data_source.getProductID(productName);
        String customer_name = row.get(0).toString();
        if (productID == 1) {
            double quantity = Double.parseDouble(row.get(5).toString());
            orderForm.removeOrderWithDrawalQuantity(customer_name, quantity);
        }
        if (productID == 2) {
            double quantity = Double.parseDouble(row.get(3).toString());
            orderForm.removeOrderWithDrawalQuantity(customer_name, quantity);
        }

        this.delete_btn.setEnabled(false);
    }//GEN-LAST:event_delete_btnActionPerformed

    private void orderDetaile_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderDetaile_tableMouseClicked
        // TODO add your handling code here:
        this.delete_btn.setEnabled(true);
    }//GEN-LAST:event_orderDetaile_tableMouseClicked

    private void dates_CBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dates_CBActionPerformed
        // TODO add your handling code here:
        DateFormat df = new SimpleDateFormat("EEEEEEE", new Locale("ar", "AE", "Arabic"));// DateFormat.getDateTimeInstance(DateFormat.DEFAULT,DateFormat.FULL, new Locale("ar","AE","Arabic"));

        if (!monthesFillingMode) {

            int index = dates_CB.getSelectedIndex();
            Date date = dailySalesBookDates.get(index);

            String day = df.format(date);
            day_label.setText(day);
            fillDailySalesBook_Table(new java.sql.Date(date.getTime()));

        }
    }//GEN-LAST:event_dates_CBActionPerformed

    private void sellerType_CBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sellerType_CBItemStateChanged
        // TODO add your handling code here:
        JComboBox cb = (JComboBox) evt.getSource();
        Object item = evt.getItem();

        if (evt.getStateChange() == evt.SELECTED) {
            int index = sellerType_CB.getSelectedIndex();
            if (index == 0) {
                this.temperoary_TF.setEditable(false);
                this.address_TF.setEditable(false);
                this.phone_TF.setEditable(false);
            } else {
                this.temperoary_TF.setEditable(true);
                this.address_TF.setEditable(true);
                this.phone_TF.setEditable(true);

            }

        } else if (evt.getStateChange() == evt.DESELECTED) {
            // Item is no longer selected
        }


    }//GEN-LAST:event_sellerType_CBItemStateChanged

    private void temperoary_TFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_temperoary_TFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_temperoary_TFActionPerformed

    private void sellerType_CBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellerType_CBActionPerformed
        // TODO add your handling code here:
        int index = sellerType_CB.getSelectedIndex();
        if (index == 0) {
            CardLayout c = (CardLayout) jPanel5.getLayout();
            c.show(jPanel5, "cash_card");

        } else if (index == 1) {

            CardLayout c = (CardLayout) jPanel5.getLayout();
            c.show(jPanel5, "permenant_card");
            this.permenant_TF.setText("");

        }
    }//GEN-LAST:event_sellerType_CBActionPerformed

    private void month_CBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_month_CBActionPerformed
        // TODO add your handling code here:
        DateFormat df_month = new SimpleDateFormat("MMMMMM-yyyy ", new Locale("ar", "AE", "Arabic"));// DateFormat.getDateTimeInstance(DateFormat.DEFAULT,DateFormat.FULL, new Locale("ar","AE","Arabic"));
        DateFormat df_day = new SimpleDateFormat("dd", new Locale("ar", "AE", "Arabic"));// DateFormat.getDateTimeInstance(DateFormat.DEFAULT,DateFormat.FULL, new Locale("ar","AE","Arabic"));

        if (!monthesFillingMode) {
            dayFillinMode = true;
            day_CB.removeAllItems();
            List<String> days = getDaysList(dailySalesBookDates, month_CB.getSelectedItem().toString());
            for (int i = 0; i < days.size(); i++) {
                day_CB.addItem(days.get(i));

            }
            dayFillinMode = false;
            //if selected month is cusrrent month
            if ((df_month.format(new Date())).equals(month_CB.getSelectedItem().toString())) {

                String currentday = df_day.format(new Date());

                day_CB.setSelectedItem(((currentday)));

            } else {
                day_CB.setSelectedIndex(0);
            }

        }

    }//GEN-LAST:event_month_CBActionPerformed
    void setRestVlaue() {
        String total = total_TF.getText();
        String paid = paid_TF.getText();
        double x = 0;
        if (total != null && paid != null) {
            if (!total.isEmpty() && !paid.isEmpty()) {
                double paidvalue = Double.parseDouble(paid);
                double totalvalue = Double.parseDouble(total);
                x = totalvalue - paidvalue;

            }
            if (!total.isEmpty() && paid.isEmpty()) {
                x = Double.parseDouble(total);
            }

        }

        rest_TF.setText(String.valueOf(x));

    }
    private void day_CBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_day_CBActionPerformed
        // TODO add your handling code here:

        DateFormat df = new SimpleDateFormat("dd-MMMMMM-yyyy ", new Locale("ar", "AE", "Arabic"));// DateFormat.getDateTimeInstance(DateFormat.DEFAULT,DateFormat.FULL, new Locale("ar","AE","Arabic"));

        if (!monthesFillingMode && !dayFillinMode) {

            String month = month_CB.getSelectedItem().toString();
            String day = day_CB.getSelectedItem().toString();
            String selectdDate = day + "-" + month;
            //get selected date 
            int i = 0;
            for (i = 0; i < dailySalesBookDates.size(); i++) {
                String s = (df.format(dailySalesBookDates.get(i)));
                if (selectdDate.equals(s)) {

                    break;
                }

            }
            if (i < dailySalesBookDates.size()) {
                Date date = dailySalesBookDates.get(i);
                DateFormat df_dayName = new SimpleDateFormat("EEEEEEE", new Locale("ar", "AE", "Arabic"));// DateFormat.getDateTimeInstance(DateFormat.DEFAULT,DateFormat.FULL, new Locale("ar","AE","Arabic"));

                String dayname = df_dayName.format(date);
                day_label.setText(dayname);
                fillDailySalesBook_Table(new java.sql.Date(date.getTime()));

            }
        }
    }//GEN-LAST:event_day_CBActionPerformed

    private void phone_TFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phone_TFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phone_TFActionPerformed
    public class MyCellRenderer extends javax.swing.table.DefaultTableCellRenderer {

        List<Integer> rows = new ArrayList<>();

        public MyCellRenderer(List<Integer> rows) {
            this.rows = rows;

        }

        public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, java.lang.Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            final java.awt.Component cellComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            if (rows.contains(row)) {

                cellComponent.setBackground(Color.lightGray);

            } else {
                cellComponent.setBackground(Color.white);

            }
            cellComponent.setFocusable(false);

            return cellComponent;

        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addOrder_btn;
    private javax.swing.JTextField address_TF;
    private javax.swing.JTextField cash_TF;
    private javax.swing.JPanel dataInput_panel;
    private javax.swing.JComboBox dates_CB;
    private javax.swing.JComboBox day_CB;
    private javax.swing.JLabel day_label;
    private javax.swing.JButton delete_btn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JComboBox month_CB;
    private javax.swing.JPanel orderDate_panel;
    private javax.swing.JTable orderDetaile_table;
    private javax.swing.JDialog orderForm_dialog;
    private javax.swing.JTextField paid_TF;
    private javax.swing.JLabel paid_label;
    private javax.swing.JTextField permenant_TF;
    private javax.swing.JTextField phone_TF;
    private javax.swing.JTextField rest_TF;
    private javax.swing.JLabel rest_label;
    private javax.swing.JButton save_btn;
    private javax.swing.JComboBox sellerType_CB;
    private javax.swing.JTextField temperoary_TF;
    private javax.swing.JTextField total_TF;
    private javax.swing.JLabel wraning_label;
    // End of variables declaration//GEN-END:variables

    String orderDetails_columnsNames[] = new String[]{
        "اسم العميل", "المبلغ", "الفئة", "عدد", "الصافي", "القائم", "المنتج"
    };

    String dailSalesBook_columntitles[] = new String[]{
        "اسم العميل", "المبلغ", "الفئه", "الصافي", "القائم", "عدد", "المنتج", "اسم البياع"
    };
}
