/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shop.GUI;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import shop.data_source_pkg.DataSourc;

/**
 *
 * @author ahmed
 */
public class Inventor extends javax.swing.JPanel {

    /**
     * Creates new form Inventory
     */
    boolean fillMode;
    List<java.util.Date> dates;

    DataSourc data_source;
    Main_Frame myFrame;

    public Inventor(Main_Frame myFrame, DataSourc data_source) {
        this.data_source = data_source;
        this.myFrame = myFrame;

        initComponents();
        intiatePage();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        fridageID_CB = new javax.swing.JComboBox();
        inventoryDates_CB = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inventoryHeader_table = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        temp_panel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        outcomeHeader_table = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        inventoryDetail_table = new javax.swing.JTable();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(16, 172, 61), 3, true)));

        jButton1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jButton1.setEnabled(false);
        jButton1.setText("تصفية الموسم");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel6.setPreferredSize(new java.awt.Dimension(400, 30));

        fridageID_CB.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        fridageID_CB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "الكل", "ثلاجة رفم 18", "ثلاجة رقم21" }));
        fridageID_CB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fridageID_CBActionPerformed(evt);
            }
        });

        inventoryDates_CB.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        inventoryDates_CB.setPreferredSize(new java.awt.Dimension(150, 35));
        inventoryDates_CB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                inventoryDates_CBItemStateChanged(evt);
            }
        });
        inventoryDates_CB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventoryDates_CBActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("صافي");
        jLabel1.setPreferredSize(new java.awt.Dimension(70, 35));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(fridageID_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inventoryDates_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(fridageID_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(inventoryDates_CB, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(219, 219, 219)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        inventoryHeader_table.setFont(new java.awt.Font("B Fantezy", 0, 22)); // NOI18N
        inventoryHeader_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "صافي الربح", "مشتروات", "قوطاع", "عيوشي", "عمولة", "مصاريف المحل ", "موز كريم", "مسحوبات كريم", "ذمامات نهاية العام", "ذمامات بداية العام"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        inventoryHeader_table.setCellSelectionEnabled(true);
        inventoryHeader_table.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        inventoryHeader_table.setGridColor(new java.awt.Color(255, 0, 51));
        inventoryHeader_table.setPreferredSize(new java.awt.Dimension(300, 120));
        inventoryHeader_table.setRequestFocusEnabled(false);
        inventoryHeader_table.setRowHeight(40);
        inventoryHeader_table.setRowMargin(5);
        inventoryHeader_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inventoryHeader_tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(inventoryHeader_table);

        outcomeHeader_table.setFont(new java.awt.Font("B Fantezy", 0, 22)); // NOI18N
        outcomeHeader_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "نثريات", "سماحات", "الصدقة و الزكاة", "العمال", "الوهبات", "صيانة"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        outcomeHeader_table.setCellSelectionEnabled(true);
        outcomeHeader_table.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        outcomeHeader_table.setGridColor(new java.awt.Color(255, 0, 51));
        outcomeHeader_table.setPreferredSize(new java.awt.Dimension(300, 120));
        outcomeHeader_table.setRequestFocusEnabled(false);
        outcomeHeader_table.setRowHeight(40);
        outcomeHeader_table.setRowMargin(5);
        outcomeHeader_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                outcomeHeader_tableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(outcomeHeader_table);

        javax.swing.GroupLayout temp_panelLayout = new javax.swing.GroupLayout(temp_panel);
        temp_panel.setLayout(temp_panelLayout);
        temp_panelLayout.setHorizontalGroup(
            temp_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        temp_panelLayout.setVerticalGroup(
            temp_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel3.setLayout(new javax.swing.OverlayLayout(jPanel3));

        inventoryDetail_table.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        inventoryDetail_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        inventoryDetail_table.setRowHeight(25);
        jScrollPane2.setViewportView(inventoryDetail_table);

        jPanel3.add(jScrollPane2);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(temp_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(temp_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 942, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane3.setViewportView(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 974, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
public void refrishPage() {

    }

    void fillExpensesHeader(java.util.Date requestedDate) {
        int seasonID = data_source.getCurrentSeason();

        double labours = data_source.getTotalOutcomeType(requestedDate, "labours", seasonID);
        double tips = data_source.getTotalOutcomeType(requestedDate, "TIPS", seasonID);
        double maintance = data_source.getTotalOutcomeType(requestedDate, "maintaince", seasonID);
        double forgiveness = data_source.getTotalOutcomeType(requestedDate, "forgivness", seasonID);
        double allah = data_source.getTotalOutcomeType(requestedDate, "allah", seasonID);
        double var = data_source.getTotalOutcomeType(requestedDate, "varaity", seasonID);

        DefaultTableModel dtm = (DefaultTableModel) outcomeHeader_table.getModel();
        Vector<Object> row = new Vector<>(Arrays.asList(var, forgiveness, allah, labours, tips, maintance));
        dtm.setDataVector(new Vector<>(Arrays.asList(row)), outcomeHeader_columnTitles);
        outcomeHeader_table.setModel(dtm);
    }
    private void inventoryHeader_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inventoryHeader_tableMouseClicked
        // TODO add your handling code here:
        int index = inventoryDates_CB.getSelectedIndex();
        int seasonID = data_source.getCurrentSeason();
        int fridageID = fridageID_CB.getSelectedIndex();
        java.util.Date requestedDate = (index == 0) ? null : dates.get(index - 1);
        index = inventoryHeader_table.getSelectedColumn();
        Vector<Object> data = null;
        DefaultTableModel dtm = (DefaultTableModel) inventoryDetail_table.getModel();

        switch (index) {
            case 1:
                data = data_source.getPurchasesProfitDet(requestedDate, seasonID, fridageID);
                dtm.setDataVector(data, purchases_columnTitles);
                this.temp_panel.setVisible(false);
                setPurchases_tableSize();
                break;
            case 2:
                this.temp_panel.setVisible(false);

                data = data_source.getSalamiProductsProfitDet(3, requestedDate, seasonID, fridageID);
                dtm.setDataVector(data, salami_4);
                setProduct3_tableSize();
                break;
            case 3:
                this.temp_panel.setVisible(false);
                //  setProdut4_tableSize();
                data = data_source.getSalamiProductsProfitDet(4, requestedDate, seasonID, fridageID);
                dtm.setDataVector(data, salami_3);
                setProdut4_tableSize();
                break;
            case 4:
                this.temp_panel.setVisible(false);

                data = data_source.getCommisionProfitDet(requestedDate, seasonID, fridageID);
                dtm.setDataVector(data, commision_columnTitles);
                setCommssion_tableSize();
                break;
            case 5:
                this.temp_panel.setVisible(true);

                data = null;//data_source.getTotalOutcomeDet(requestedDate);
                dtm.setDataVector(data, outcome_columnTitles);
                fillExpensesHeader(requestedDate);

                break;
            case 6:
                this.temp_panel.setVisible(false);

                data = data_source.getkareemOrders(requestedDate, seasonID, fridageID);
                dtm.setDataVector(data, kOrders_columnTitles);
                setKareem_tableSize();
                break;
            case 7:
                this.temp_panel.setVisible(false);

                data = data_source.getkaremmTotalWithdrawalDet(requestedDate, seasonID);
                dtm.setDataVector(data, kareemWithdrawals);
                setKareemWith_tableSize();
                break;

        }

        inventoryDetail_table.setModel(dtm);
    }//GEN-LAST:event_inventoryHeader_tableMouseClicked

    private void inventoryDates_CBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_inventoryDates_CBItemStateChanged
        // TODO add your handling code here:
        JComboBox cb = (JComboBox) evt.getSource();
        Object item = evt.getItem();
        java.util.Date currentDate = null;
        if (evt.getStateChange() == evt.SELECTED) {

        } else if (evt.getStateChange() == evt.DESELECTED) {
            // Item is no longer selected
        }

    }//GEN-LAST:event_inventoryDates_CBItemStateChanged

    private void inventoryDates_CBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inventoryDates_CBActionPerformed
        // TODO add your handling code here:
        doInventory();
    }//GEN-LAST:event_inventoryDates_CBActionPerformed
    void doInventory() {

        java.util.Date currentDate = null;
        if (!fillMode) {
            int dateIndex = inventoryDates_CB.getSelectedIndex();
            int seasonID = data_source.getCurrentSeason();
            int fridageID = fridageID_CB.getSelectedIndex();

            if (dateIndex != 0) {
                currentDate = dates.get(dateIndex - 1);

            }

            double purchases = data_source.getPurchasesProfit(currentDate, seasonID, fridageID);
            double kareemWith = data_source.getkaremmTotalWithdrawal(currentDate, seasonID);
            double expenses = data_source.getTotalOutcome(currentDate, seasonID);
            double commision = data_source.getCommisionProfit(currentDate, seasonID, fridageID);
            double salami3 = data_source.getSalamiProductsProfit(3, currentDate, seasonID, fridageID);
            double salami4 = data_source.getSalamiProductsProfit(4, currentDate, seasonID, fridageID);
            double k_orders = data_source.getKTotalOrders(currentDate, seasonID, fridageID);
            double seasonStartSellersLoan = data_source.getSeasonStartTotalSellersLoan(seasonID);
            double seasonEndSellersLoan = data_source.getSeasonEndTotalSellersLoan(seasonID);
            double profit = (commision + salami3 + salami4 + +purchases) - ( expenses);
            DefaultTableModel dtm = (DefaultTableModel) inventoryHeader_table.getModel();

            Vector<Object> rowFridage = new Vector<>(Arrays.asList((purchases + salami4 + salami3 + commision), purchases, salami3, salami4, commision, k_orders));

            Vector<Object> row = new Vector<>(Arrays.asList(profit, purchases, salami3, salami4, commision, expenses, k_orders, kareemWith, seasonEndSellersLoan, seasonStartSellersLoan));

            if (fridageID == 0) {
                dtm.setDataVector(new Vector<>(Arrays.asList(row)), inventory_columnsTitles);
            } else {
                dtm.setDataVector(new Vector<>(Arrays.asList(rowFridage)), inventoryFridage_columnsTitles);

            }
            inventoryHeader_table.setModel(dtm);
        }

    }
    private void outcomeHeader_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_outcomeHeader_tableMouseClicked
        // TODO add your handling code here:

        int index = inventoryDates_CB.getSelectedIndex();
        java.util.Date requestedDate = (index == 0) ? null : dates.get(index - 1);
        index = outcomeHeader_table.getSelectedColumn();
        Vector<Object> data = null;
        DefaultTableModel dtm = (DefaultTableModel) inventoryDetail_table.getModel();
        //labours maintaince varaity allah forgivness TIPS
        switch (index) {
            case 0:
                filloutComeDetailTable(requestedDate, "varaity");

                break;
            case 1:
                filloutComeDetailTable(requestedDate, "forgivness");
                break;
            case 2:
                filloutComeDetailTable(requestedDate, "allah");
                break;
            case 3:
                filloutComeDetailTable(requestedDate, "labours");
                break;
            case 4:
                filloutComeDetailTable(requestedDate, "TIPS");
                break;
            case 5:
                filloutComeDetailTable(requestedDate, "maintaince");
                break;
        }


    }//GEN-LAST:event_outcomeHeader_tableMouseClicked
    boolean validateCloseSeason() {

        boolean validflag = data_source.validateSeasonClose(data_source.getCurrentSeason());
        if (!validflag) {
            JOptionPane.showMessageDialog(this, "يجب تسليم جميع الفواتير في الثلاجة رقم 18 و الثلاجة رقم 21");
        }
        return validflag;
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (validateCloseSeason()) {
            data_source.closeSeason();
            intiatePage();

        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void fridageID_CBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fridageID_CBActionPerformed
        // TODO add your handling code here:
        doInventory();
    }//GEN-LAST:event_fridageID_CBActionPerformed

    void filloutComeDetailTable(java.util.Date currentDate, String type) {
       int seasonID=data_source.getCurrentSeason();
        Vector<Object> data = data_source.getOutcomeTypeDet(currentDate, type,seasonID);

        DefaultTableModel dtm = (DefaultTableModel) inventoryDetail_table.getModel();
        dtm.setDataVector(data, outcomeDetail_columnTitles);
        inventoryDetail_table.setModel(dtm);

    }

    void intiatePage() {
        int seasonID = data_source.getCurrentSeason();
        dates = data_source.getInventoryDates(seasonID);

        fillDates();
        this.temp_panel.setVisible(false);

    }

    String NormalizeinArabic(String str) {

        char[] arabicChars = {'٠', '١', '٢', '٣', '٤', '٥', '٦', '٧', '٨', '٩'};
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < str.length(); i++) {
            if (Character.isDigit(str.charAt(i))) {
                builder.append(arabicChars[(int) (str.charAt(i)) - 48]);
            } else {
                builder.append(str.charAt(i));
            }
        }
//        System.out.println("Number in English : " + str);
//        System.out.println("Number In Arabic : " + builder.toString());
        return builder.toString();
    }

    void fillDates() {
        fillMode = true;

        inventoryDates_CB.removeAllItems();
        inventoryDates_CB.addItem("الكل");
        DateFormat df = new SimpleDateFormat("  MMMMMM-yyyy ", new Locale("ar", "AE", "Arabic"));// DateFormat.getDateTimeInstance(DateFormat.DEFAULT,DateFormat.FULL, new Locale("ar","AE","Arabic"));

        for (int i = 0; i < dates.size(); i++) {
            inventoryDates_CB.addItem(NormalizeinArabic(df.format(dates.get(i))));

        }
        fillMode = false;
        if (inventoryDates_CB.getItemCount() > 1) {
            inventoryDates_CB.setSelectedIndex(1);
        }
    }

    void setKareemWith_tableSize() {
        //customerOrders_table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableColumn column = null;
        for (int i = 0; i < inventoryDetail_table.getColumnModel().getColumnCount(); i++) {
            column = inventoryDetail_table.getColumnModel().getColumn(i);

            switch (i) {
                case 0:
                    column.setPreferredWidth(250);
                    break;
                case 1:
                    column.setPreferredWidth(120);
                    break;
                case 2:
                    column.setPreferredWidth(120);
                    break;
                case 3:
                    column.setPreferredWidth(120);
                    break;
                case 4:
                    column.setPreferredWidth(120);
                    break;
                case 5:
                    column.setPreferredWidth(200);
                    break;
            }
        }

    }

    void setKareemOrders_tableSize() {
        //customerOrders_table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableColumn column = null;
        for (int i = 0; i < inventoryDetail_table.getColumnModel().getColumnCount(); i++) {
            column = inventoryDetail_table.getColumnModel().getColumn(i);

            switch (i) {
                case 0:
                    column.setPreferredWidth(120);
                    break;
                case 1:
                    column.setPreferredWidth(250);
                    break;
                case 2:
                    column.setPreferredWidth(80);
                    break;

            }
        }

    }

    void setExpenese_tableSize() {
        //customerOrders_table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableColumn column = null;
        for (int i = 0; i < inventoryDetail_table.getColumnModel().getColumnCount(); i++) {
            column = inventoryDetail_table.getColumnModel().getColumn(i);

            switch (i) {
                case 0:
                    column.setPreferredWidth(120);
                    break;
                case 1:
                    column.setPreferredWidth(250);
                    break;
                case 2:
                    column.setPreferredWidth(80);
                    break;

            }
        }

    }

    void setCommssion_tableSize() {
        //customerOrders_table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableColumn column = null;
        for (int i = 0; i < inventoryDetail_table.getColumnModel().getColumnCount(); i++) {
            column = inventoryDetail_table.getColumnModel().getColumn(i);

            switch (i) {
                case 0:
                    column.setPreferredWidth(70);
                    break;
                case 1:
                    column.setPreferredWidth(120);
                    break;
                case 2:
                    column.setPreferredWidth(80);
                    break;
                case 3:
                    column.setPreferredWidth(80);
                    break;
                case 4:
                    column.setPreferredWidth(60);
                    break;
                case 5:
                    column.setPreferredWidth(80);
                    break;

                case 6:
                    column.setPreferredWidth(80);
                    break;
                case 7:
                    column.setPreferredWidth(100);
                    break;

                case 8:
                    column.setPreferredWidth(60);
                    break;
                case 9:
                    column.setPreferredWidth(100);
                    break;
                case 10:
                    column.setPreferredWidth(320);
                    break;
                case 11:
                    column.setPreferredWidth(50);
                    break;
            }
        }

    }

    void setProduct3_tableSize() {
        //customerOrders_table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableColumn column = null;
        for (int i = 0; i < inventoryDetail_table.getColumnModel().getColumnCount(); i++) {
            column = inventoryDetail_table.getColumnModel().getColumn(i);

            switch (i) {
                case 5:
                    column.setPreferredWidth(250);
                    break;

            }
        }

    }

    void setKareem_tableSize() {
        //customerOrders_table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableColumn column = null;
        for (int i = 0; i < inventoryDetail_table.getColumnModel().getColumnCount(); i++) {
            column = inventoryDetail_table.getColumnModel().getColumn(i);

            switch (i) {
                case 0:
                    column.setPreferredWidth(100);
                    break;
                case 1:
                    column.setPreferredWidth(100);
                    break;
                case 2:
                    column.setPreferredWidth(100);
                    break;
                case 3:
                    column.setPreferredWidth(80);
                    break;
                case 4:
                    column.setPreferredWidth(100);
                    break;
                case 5:
                    column.setPreferredWidth(100);
                    break;
                case 6:
                    column.setPreferredWidth(80);
                    break;
                case 7:
                    column.setPreferredWidth(80);
                    break;
                case 8:
                    column.setPreferredWidth(230);
                    break;
                case 9:
                    column.setPreferredWidth(150);
                    break;

            }
        }

    }

    void setProdut4_tableSize() {
        //customerOrders_table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableColumn column = null;
        for (int i = 0; i < inventoryDetail_table.getColumnModel().getColumnCount(); i++) {
            column = inventoryDetail_table.getColumnModel().getColumn(i);

            switch (i) {
                case 0:
                    column.setPreferredWidth(100);
                    break;
                case 1:
                    column.setPreferredWidth(100);
                    break;
                case 2:
                    column.setPreferredWidth(80);
                    break;
                case 3:
                    column.setPreferredWidth(80);
                    break;
                case 4:
                    column.setPreferredWidth(100);
                    break;
                case 5:
                    column.setPreferredWidth(100);
                    break;
                case 6:
                    column.setPreferredWidth(160);
                    break;
                case 7:
                    column.setPreferredWidth(250);
                    break;
                case 8:
                    column.setPreferredWidth(50);
                    break;

            }
        }

    }

    void setPurchases_tableSize() {
        //  inventoryDetail_table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableColumn column = null;
        for (int i = 0; i < inventoryDetail_table.getColumnModel().getColumnCount(); i++) {
            column = inventoryDetail_table.getColumnModel().getColumn(i);

            switch (i) {
                case 0:
                    column.setPreferredWidth(120);
                    break;
                case 1:
                    column.setPreferredWidth(120);
                    break;
                case 2:
                    column.setPreferredWidth(80);
                    break;
                case 3:
                    column.setPreferredWidth(120);
                    break;

                case 4:
                    column.setPreferredWidth(120);
                    break;
                case 5:
                    column.setPreferredWidth(80);
                    break;

                case 6:
                    column.setPreferredWidth(100);
                    break;
                case 7:
                    column.setPreferredWidth(300);
                    break;
                case 8:
                    column.setPreferredWidth(50);
                    break;
            }
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox fridageID_CB;
    private javax.swing.JComboBox inventoryDates_CB;
    private javax.swing.JTable inventoryDetail_table;
    private javax.swing.JTable inventoryHeader_table;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable outcomeHeader_table;
    private javax.swing.JPanel temp_panel;
    // End of variables declaration//GEN-END:variables

    Vector<String> purchases_columnTitles = new Vector<>(Arrays.asList(
            "العمولة", "رقم الثلاجة", "الفئة", "اجمالي المبلغ", "وهبة", "الثمن", "ناولون", "تاريخ الفاتورة", "رفم الفاتورة"
    ));

    Vector<String> salami_3 = new Vector<>(Arrays.asList(
            "المبلغ", "رقم الثلاجة", "الفئة", "العدد", "الصافي", "القائم", "المنتج", "تاريخ الفاتورة", "رقم الفاتورة"
    ));

    Vector<String> salami_4 = new Vector<>(Arrays.asList(
            "المبلغ", "رقم الثلاجة", "الفئة", "العدد", "المنتج", "تاريخ الفاتورة", "رقم الفاتورة"
    ));
    Vector<String> commision_columnTitles = new Vector<>(Arrays.asList(
            "عمولة", "رقم الثلاجة", "صافي المبلغ", "إجمالي المبلغ", "الوهبة", "الصافي", "الوزن القائم", "المنتج", "ناولون", "البيان", "تاريخ الفاتورة", "رقم الفاتورة"
    ));
    Vector<String> outcome_columnTitles = new Vector<>(Arrays.asList(
            "النثريات", "الزكاة والصدقات", "وهبات", "السماحات", "صيانة", "العمال"
    ));
    Vector<String> kareemWithdrawals = new Vector<>(Arrays.asList(
            "ملاحظات", "المبلغ", "المحرر", "البيان", "اسم المستفيد", "التاريخ"
    ));
    Vector<String> inventory_columnsTitles = new Vector<>(Arrays.asList(
            "صافي الربح", "مشتروات", "قوطاع", "عيوشي", "عمولة", "مصاريف المحل ", "موز كريم", "مسحوبات كريم", "ذمامات نهاية العام", "ذمامات بداية العام"
    ));
    Vector<String> inventoryFridage_columnsTitles = new Vector<>(Arrays.asList(
            "صافي الربح", "مشتروات", "قوطاع", "عيوشي", "عمولة"
    ));
    Vector<String> outcomeHeader_columnTitles = new Vector<>(Arrays.asList(
            "نثريات", "سماحات", "الصدقة و الزكاة", "العمال", "الوهبات", "صيانة"
    ));

    Vector<String> kOrders_columnTitles = new Vector<>(Arrays.asList(
            "صافي المبلغ", "رقم الثلاجة", "عمولة", "إجمالي المبلغ", "الوهبة", "الصافي", "الوزن القائم", "ناولون", "تاريخ الفاتورة", "اسم الأرض", "رقم الفاتورة"
    ));

    Vector<String> outcomeDetail_columnTitles = new Vector<>(Arrays.asList(
            "ملاحظات", "المبلغ", "التاريخ"
    ));

}
